@using MvcFlashMessages
@using System.Globalization
@using emp_ferias.lib.Classes
@model emp_ferias.Models.IndexViewModel
@{
    ViewBag.Title = "Conta - Gestor de Férias";
}

<div class="jumbotron">
    <div class="container-fluid body-content" style="width: 70%">
        <h1 id="icon">Conta</h1>
        <p class="lead container body-content jumbotron-description"></p>
    </div>
</div>

<div class="content">
    <ol class="overflow breadcrumb">
        <li>@Html.ActionLink("Página Inicial", "Index", "Home")</li>
        <li class="active">Conta</li>
    </ol>
    @Html.RenderFlash()
    <div class="overflow panel panel-default regionHeader" style="margin-top: 0px;">
        <div class="panel-heading regionHeader-header">
            <h3 class="panel-title">Marcações</h3>
        </div>
    </div>  

    <div class="col-md-6">
        <form class="form-inline">
            <label>Marcações efetuadas &nbsp;</label>
            <select class="form-control" id="DataSet">
                <option value="1">por pedido</option>
                <option value="2">por total de dias</option>
            </select>
            <input type="checkbox" class="chkbox" id="IncludeRejected"/>
            <label style="font-weight: 400;">Incluir rejeitadas e expiradas</label>
        </form>
        <div id="canvas-wrapper" style="max-width:100%; height: auto; margin-top: 10px;">
            <canvas id="doughnut" style="max-width:100%; height:auto"></canvas>
        </div>
        <div class="col-md-12" id="progress-wrapper">
            <label>Taxa de Aceitação</label>
            <div class="progress" id="accBar">
                @{
                    double total = 0;
                    double accepted = 0;
                    foreach (var i in Model.Marcacoes)
                    {
                        total++;
                        if (i.Status != Status.Rejeitado && i.Status != Status.Expirado)
                        {
                            accepted++;
                        }
                    }
                    var acceptedPercentage = Math.Round((accepted / total) * 100);
                    var acceptedString = acceptedPercentage.ToString(CultureInfo.InvariantCulture) + "%";
                    var rejectedString = (100 - acceptedPercentage).ToString(CultureInfo.InvariantCulture) + "%";
                }
                <div class="progress-bar progress-bar-success" style="width: @acceptedString" data-toggle="tooltip" data-placement="left" title="@accepted (@acceptedString) marcações aceites.">
                    <span class="sr-only">@acceptedString</span>
                </div>
                <div class="progress-bar progress-bar-warning" style="width: @rejectedString" data-toggle="tooltip" data-placement="right" title="@(total-accepted) (@rejectedString) marcações rejeitadas.">
                    <span class="sr-only">@rejectedString</span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <table class="table table-hover marcacoes-table" id="table1">
            <thead>
                <tr>
                    <th>
                        ID
                    </th>
                    <th>
                        Duração
                    </th>
                    <th>
                        Razão
                    </th>
                    <th>
                        Estado <i class="fa fa-info" aria-hidden="true" tabindex="0" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="Passe por cima de cada um dos estados das marcações para mais informações"></i>
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Model.Marcacoes)
                {
                    <tr class="bg-info">
                        <td>
                            @Html.DisplayFor(modelItem => item.id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DataInicio) – @Html.DisplayFor(modelItem => item.DataFim)
                            <button style="outline: none" type="button" class="btn-simple" data-container="body" data-trigger="hover" data-toggle="popover" data-placement="bottom" data-content="Total:
                                @{
                                    var length = (item.DataFim - item.DataInicio).Days +1;
                                    string lengthstring;
                                    if (length == 1)
                                    {
                                        lengthstring = length + " dia";
                                    }
                                    else
                                    {
                                        lengthstring = length + " dias";
                                    }
                                    } @lengthstring">
                                <i class="fa fa-info-circle" aria-hidden="true"></i>
                            </button>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Motivo)
                        </td>
                        <td>
                            <span class="label @(item.Status == Status.EmProgresso ? "label-success"
                                                   : item.Status == Status.Aprovado ? "label-primary"
                                                   : item.Status == Status.Expirado ? "label-default"
                                                   : item.Status == Status.Finalizado ? "label-warning"
                                                   : item.Status == Status.Rejeitado ? "label-danger"
                                                   : "label-default"
                                                   )">@(item.Status == Status.EmProgresso ? Html.Label("Em Progresso") : Html.DisplayFor(x => item.Status))</span>
                        </td>
                    </tr>
                }
                @if (!Model.Marcacoes.Any())
                {
                    <tr class="bg-info">
                        <td colspan="4">Ainda não tem marcações. @Html.ActionLink("Criar uma nova.", "Create", "Marcacoes")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <div class="regionHeader overflow panel panel-default no-margin-top">
        <div class="panel-heading regionHeader-header" >
            <h3 class="panel-title">Dados</h3>
        </div>
    </div>  
    <table id="#userdata" align="center" style="width: 40%">
        <tr>
            <td class="userinfo-left"><label class="userinfo">ID</label></td>
            <td class="userinfo-right"><code>@Model.UserId</code></td>
        </tr>
        <tr>
            <td class="userinfo-left"><label class="userinfo">Nome de Utilizador</label></td>
            <td class="userinfo-right"><code>@Model.UserName</code></td>
        </tr>
        <tr>
            <td class="userinfo-left"><label class="userinfo">Email</label></td>
            <td class="userinfo-right"><code>@Model.Email</code></td>
        </tr>
        <tr>
            <td class="userinfo-left"><label class="userinfo">Password</label></td>
            <td class="userinfo-right">@Html.ActionLink("Alterar","ChangePassword")</td>
        </tr>
        <tr>
            <td colspan="2"><a data-toggle="modal" data-target="#UserModal" onclick="UpdateModal(this.getAttribute('data-userid'))" data-userid="@Model.UserId"><i class="fa fa-plus"></i>&nbsp;Mais Info</a></td>
        </tr>
    </table>
</div>

<div class="modal fade" id="UserModal" tabindex="-1" role="dialog" aria-labelledby="UserModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="UserModal-title">Utilizador</h4>
            </div>
            <div class="modal-body" id="UserModal-body">
                <div id="UserModal-progressicon">
                    <i class="fa fa-cog fa-spin fa-3x fa-fw" id="tableState-symbol"></i>
                </div>
                <div id="UserModal-userinfo">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-round-default" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/bower_components/Chart.js/dist/Chart.js"></script>
    <script>
        function UpdateModal(id) {
            $.ajax({
                url: "/User/UserModalData",
                type: "GET",
                data: {
                    "id": id
                },
                beforeSend: function () {
                    $("#UserModal-progressicon").show();
                    $("#UserModal-userinfo").hide();
                },
                success: function (result) {
                    $("#UserModal-userinfo").html(result);
                    $("#UserModal-progressicon").hide();
                    $("#UserModal-userinfo").show();
                },
            });
        }

        $(document).ready(function () {
            var ctx = document.getElementById("doughnut");

            var SelectedDataSet = 0;
            var IncludeRejected = false;
            RefreshChart();

            $("#DataSet").change(function() {
                if ($('#DataSet option:selected').val() == "1") {
                    SelectedDataSet = 0;
                }
                else {
                    SelectedDataSet = 1;
                }
                RefreshChart();
            });
            
            $("#IncludeRejected").change(function () {
                if (this.checked) {
                    IncludeRejected = true;
                }
                else {
                    IncludeRejected = false;
                }

                RefreshChart();
            })

            function RefreshChart() {
                $.ajax({
                    dataType: "json",
                    data: {
                        "DataSet": SelectedDataSet,
                        "IncludeRejected": IncludeRejected
                    },
                    url: "/Manage/ChartData",
                    success: function (data) {
                        resetCanvas();
                        var doughnut = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                                labels: ["Férias", "Justificada", "Injustificada"],
                                datasets: [{
                                    label: '# de dias',
                                    data: data,
                                    backgroundColor: [
                                        'rgba(44, 147, 255, 1)',
                                        'rgba(76, 217, 100, 1)',
                                        'rgba(255, 152, 0, 1)'
                                    ],
                                    borderColor: [
                                        'rgba(44, 147, 255, 0.7)',
                                        'rgba(76, 217, 100, 0.7)',
                                        'rgba(255, 152, 0, 0.7)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                        });
                    }
                })
            }

            var resetCanvas = function () {
                $('#doughnut').remove(); // this is my <canvas> element
                $('#canvas-wrapper').append('<canvas id="doughnut"><canvas>');
                canvas = document.querySelector('#doughnut'); // why use jQuery?
                ctx = canvas.getContext('2d');
                ctx.canvas.width = $('#graph').width(); // resize to parent width
                ctx.canvas.height = $('#graph').height(); // resize to parent height

                var x = canvas.width / 2;
                var y = canvas.height / 2;
                ctx.font = '10pt Roboto';
                ctx.textAlign = 'center';
                ctx.fillText('This text is centered on the canvas', x, y);
            };

            $('[data-toggle="popover"]').popover();
              $('[data-toggle="tooltip"]').tooltip()


            $('#table1').DataTable({
                "aoColumns": [
                    null,
                    { "bSortable": false },
                    null,
                    null
                ],
                language: {
                    "sProcessing": "A processar...",
                    "sLengthMenu": "Mostrar _MENU_ registos",
                    "sZeroRecords": "Não foram encontrados resultados",
                    "sInfo": "Mostrando _START_ a _END_ de _TOTAL_ registos",
                    "sInfoEmpty": "Mostrando 0 a 0 de 0 registos",
                    "sInfoFiltered": "(filtrado de _MAX_ registos no total)",
                    "sInfoPostFix": "",
                    "sSearch": "Procurar:",
                    "sUrl": "",
                    "oPaginate": {
                        "sFirst": "Primeiro",
                        "sPrevious": "Anterior",
                        "sNext": "Seguinte",
                        "sLast": "Último"
                    }
                }
            })
        });
    </script>
}
